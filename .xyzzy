;(setq ed::*c-indent-tabs-mode* t)
;(setq ed::*c++-indent-tabs-mode* t)
;(setq ed::*java-indent-tabs-mode* t)
(setq ed::*c-indent-tabs-mode* nil)
(setq ed::*c++-indent-tabs-mode* nil)
(setq ed::*java-indent-tabs-mode* nil)
(setq ed::*javascript-indent-tabs-mode* nil)
(setq ed::*html-indent-tabs-mode* nil)
(setq tab-width 4)
(setq c-basic-offset tab-width)
(setq c-indent-level tab-width)               
(setq c-argdecl-indent 0)
(setq c-brace-imaginary-offset 0)
(setq c-brace-offset (- tab-width))
(setq c-continued-statement-offset tab-width) 
;(setq c-indent-level 4)
;(setq c-continued-statement-offset 4)
;(setq c-argdecl-indent 0)
;(setq c-brace-offset -4)
;(setq c-brace-imaginary-offset 0)
;(setq c-label-offset -4)
(setq c++-indent-level 4)
(setq c++-continued-statement-offset 4)
(setq c++-argdecl-indent 0)
(setq c++-brace-offset -4)
(setq c++-brace-imaginary-offset 0)
(setq c++-label-offset -4)
(setq c++-comment-indent 4)
(setq java-indent-level 4)
(setq java-continued-statement-offset 4)
(setq java-argdecl-indent 0)
(setq java-brace-offset -4)
(setq java-brace-imaginary-offset 0)
(setq java-label-offset -4)
(setq java-comment-indent 4)
;(define-key *global-keymap* #\C-x 'kill-selection-to-clipboard )
(define-key *global-keymap* #\C-v 'paste-from-clipboard )
(global-set-key #\F8 'ctl-x-prefix)
(global-set-key #\F1 'grep-dialog)
(global-set-key #\F2 'gresreg-dialog)
(global-set-key #\F12 'goto-line)
;(setq *next-buffer-in-tab-order* t) ; バッファ移動をタブ順に
(global-set-key #\M-Right 'next-buffer) ; 前のバッファに移動 
(global-set-key #\M-Left 'previous-buffer) ; 後のバッファに移動 
(global-set-key #\M-Up 'move-previous-window)
(global-set-key #\M-Down 'other-window)
(require "dabbrev")
; インクリメンタルサーチをする
(require "isearch")
(global-set-key #\F3 'dabbrev-popup)
; (global-set-key #\C-e 'replace-string)
(setq *popup-completion-list-default* :always)
;(define-key ed::*c-mode-map* #\tab 'self-insert-command)
(require "xml/xml-mode")
(require "php-mode")
(require "ruby-mode")
(require "bash-mode")
(require "py-mode")
(load-library "javascript-mode")
(push '("\\.js$" . javascript-mode) *auto-mode-alist*)
(use-package 'xml)
(setq ed::*xml-indent-tabs-mode* nil)
(pushnew '("\\.xml?$" . xml-mode) *auto-mode-alist* :test 'equal)
(pushnew '("\\.ujml?$" . xml-mode) *auto-mode-alist* :test 'equal)
(pushnew '("\\.ujms?$" . xml-mode) *auto-mode-alist* :test 'equal)
(export 'ed::html+-mode "ed")
(autoload 'html+-mode "html+-mode" t)
(pushnew '("\\.s?html?$" . html+-mode) *auto-mode-alist* :test 'equal)
(pushnew '("\\.php?$" . php-mode) *auto-mode-alist* :test 'equal)
(pushnew '("\\.rb?$" . ruby-mode) *auto-mode-alist* :test 'equal)
(pushnew '("\\.sh?$" . bash-mode) *auto-mode-alist* :test 'equal)
(pushnew '("\\.py?$" . py-mode) *auto-mode-alist* :test 'equal)
(require "ni/setup")
;; 自動設定を利用する
(ni-autoload)
(setq *default-fileio-encoding* *encoding-utf8n*)
(setq *default-eol-code* *eol-lf*)
(defun grep-mouse-left-press ()
  "grep結果をダブルクリックでファイルopen"
  (interactive)
  (let ((click (mod *last-mouse-click-count* 6)))
  (if (= click 2)
  (first-error)
  (mouse-left-press))))

  (defvar *grep-map* nil)
  (unless *grep-map*
  (setq *grep-map* (make-sparse-keymap))
  (define-key *grep-map* #\LBtnDown 'grep-mouse-left-press))
  (add-hook 'ed::*grep-hook* #'(lambda () (use-keymap *grep-map*)))
  (add-hook 'ed::*grepd-hook* #'(lambda () (use-keymap *grep-map*)))

(load-library "multi-major-mode.l")
;html+-mode
(defun multi-html-mode ()
  (multi-major-mode-start t "html+-mode"
              '("<!--" "-->" "text-mode")
              '("<script" "</script>" "javascript-mode")
              '("<?php" "?>" "php-mode")
              '("<%" "%>" "java-mode")
              )
  )
(add-hook 'ed::*html+-mode-hook* 'multi-html-mode)

(define-key *global-keymap* #\C-c 'copy-selection-to-clipboard )
